local oldTerm

local apisLoading = {}
local root = ""

local Extension = function(path, addDot)
	if (not path) then
		return nil
	end

	if (not string.find(fs.getName(path), '%.')) then
		if (not addDot) then
			return fs.getName(path)
		else
			return ''
		end
	else
		local _path = path

		if (path:sub(#path) == '/') then
			_path = path:sub(1, #path - 1)
		end

		local ext = _path:gmatch('\[0-9a-z]+$')()

		if (ext) then
			ext = ext:sub(2)
		else
			return ''
		end

		if (addDot) then
			ext = '.' .. ext
		end

		return ext:lower()
	end
end

local RemoveExtension = function(path)
	if path:sub(1,1) == '.' then
		return path
	end

	local extension = Extension(path)

	if extension == path then
		return fs.getName(path)
	end

	return string.gsub(path, extension, ''):sub(1, -2)
end

function LoadApi(path)
	local name = RemoveExtension(fs.getName(path))

	if (apisLoading[name] == true) then
		printError("API " .. name .. " is already being loaded.")

		return false
	end

	apisLoading[name] = true

	local tEnv = {}
	setmetatable(tEnv, { __index = getfenv() })

	local fnApi, err = loadfile(path)

	if fnApi then
		setfenv(fnApi, tEnv)
		fnApi()
	else
		printError(err)
		apisLoading[name] = nil

		return false
	end

	local api = {}

	for k, v in pairs(tEnv) do
		api[k] = v
	end

	getfenv()[name] = api
	apisLoading[name] = nil

	return true
end

function Main()
	oldTerm = term

	term.setBackgroundColour(colours.white)
	term.setTextColour(colours.black)
	term.clear()
	term.setCursorPos(1, 1)
	
	if (not term.isColour()) then
		term.setBackgroundColor(colours.black)
		term.setTextColor(colours.white)
		term.clear()

		PrintCentered('LagOS requires an advanced computer.', 8)

		PrintCentered('Press any key to return to the shell.', 10)

		os.pullEvent('key')
		term.clear()
		term.setCursorPos(1,1)
	elseif (Start()) then
		if fs.exists('/.update/') and fs.isDir('/.update/') then
			if not fs.exists('/.update/.version') then
				fs.delete('/.update/')
			else
				Drawing.Clear(colours.white)
				Drawing.DrawCharactersCenter(nil, -3, nil, nil, 'Installing Update', colours.blue, colours.white)
				Drawing.DrawCharactersCenter(nil, -2, nil, nil, 'This may take a moment.', colours.grey, colours.white)
				Drawing.DrawBuffer()
				installFolder('')
				fs.delete('/.update/')
			end
	end
	
	-- Now run main.
	os.run(getfenv(), "/System/main.lua")
	
	local ok = nil
	
	if not fs.exists('/System/.version') or not fs.exists('/System/.LagOS.settings') then
		if fs.exists('/System/.LagOS.settings') then
			fs.delete('/System/.LagOS.settings')
		end
		xpcall(FirstSetup, function(err)
			ok = {false, err}
		end)
	else
		xpcall(Initialise, function(err)
			ok = {false, err}
		end)
	end
	
	if not ok[1] then
		xpcall(function()loadfile('/System/main.lua')end, function(err)
			table.insert(ok, err)
		end)
		
		--if the crash is a too long without yeilding error then there's nothing we can really do, restart
		if ok[2]:sub(-25) == 'Too long without yielding!' then
			term.setBackgroundColor(colours.grey)
			term.setTextColor(colours.white)
			term.clear()
			
			local w,h = term.getSize()
			
			if fs.exists('System/Images/crash') then
				paintutils.drawImage(paintutils.loadImage('System/Images/crash'), (w-7)/2 + 1, 3)
			end
			
			term.setBackgroundColor(colours.grey)
			term.setTextColor(colours.white)

			PrintCentered('LagOS has been forced to reboot', 8)	

			PrintCentered('You likely let your (real) computer go to sleep', 10)
			PrintCentered('or there was some huge amount of lag.', 11)
			PrintCentered('Unfortunately, there\'s no way to recover from this.', 13)

			PrintCentered('Click anywhere to reboot.', 15)

			os.pullEvent('mouse_click')
			os.reboot()
		end

		term.setBackgroundColor(colours.grey)
		term.setTextColor(colours.white)
		term.clear()
		
		local w,h = term.getSize()
		
		if fs.exists('System/Images/crash') then
			paintutils.drawImage(paintutils.loadImage('System/Images/crash'), (w-7)/2 + 1, 3)
		else
			table.insert(ok, 'Crash image nonexistent!')
		end
		
		term.setBackgroundColor(colours.grey)
		term.setTextColor(colours.white)

		PrintCentered('LagOS has crashed!', 8)

		PrintCentered('LagOS has encountered a serious error,', 10)
		PrintCentered('click anywhere to reboot.', 11)

		term.setTextColor(colours.lightGrey)
		table.remove(ok, 1)
		for i, v in ipairs(ok) do
			local w, h = term.getSize()
		    x = math.ceil(math.ceil((w / 2) - (#v / 2)), 0)+1
		    if x < 1 then
		    	x = 1
		    end
		    term.setCursorPos(x, i+12)
		    print(v)
		end

		--PrintCentered('Please report this on the forum.', Drawing.Screen.Height)
		term.setTextColor(colours.white)
		
		if http then
			PrintCentered('Sending error report, please wait.', Drawing.Screen.Height-3)
			local success = false
			parallel.waitForAny(function()sleep(7) end, function()
				local s = ok[#ok]
				local pastebin = 'Not1.6'
				if fs.find then
					local f = fs.find('*/'..s:sub(1, s:find(':')-1))[1]
					if not f then
						pastebin = PastebinPut(s)
					else
						pastebin = PastebinPut(f)
					end
				end
				local detail = {message='Crashed Before Main Initialise', time = os.clock(), errors = ok, pastebin = pastebin}
				if Current and Current.Programs then
					detail.message = 'Crashed After Main Initialise'
					detail.programs = {}
					for i, v in ipairs(Current.Programs) do
						table.insert(detail.programs, v.Name)
					end
				end
				local version = '?'

				local h = fs.open('/System/.version', 'r')
				if h then
					version = h.readAll()
					h.close()
				else
					version = 'N/E'
				end
				if not isDebug then
					-- Crash report?
					if _ then
						success = true
					end
				end
			end)
			local message = 'Error report failed!'
			if success then
				message = 'Error report sent!'
			end
			term.setCursorPos(1, Drawing.Screen.Height-3)
			term.clearLine()
			PrintCentered(message..' Click to reboot.', Drawing.Screen.Height-3)
		end

		os.pullEvent('mouse_click')
		os.reboot()
	end
	
	term.setBackgroundColor(colours.black)
	term.setCursorPos(1,1)
	term.clear()
end

function installFolder(path)
	for i, v in ipairs(fs.list('/.update/'..path)) do
		Drawing.DrawArea(1, math.floor(Drawing.Screen.Height / 2), Drawing.Screen.Width, 1, ' ', colours.lightGrey, colours.white)
		Drawing.DrawCharactersCenter(nil, 0, nil, nil, path .. v, colours.lightGrey, colours.white)
		Drawing.DrawBuffer()
		
		if fs.isDir('/.update/'..path .. v) then
			fs.makeDir('/'..path .. v)
			installFolder(path .. v .. '/')
		else
			fs.delete('/'..path .. v)
			fs.move('/.update/'..path .. v, '/'..path .. v)
		end
		
		sleep(0)
	end
end

function RegisterAPIs()
	local list = fs.list("/System/API")

	for i, api in pairs(list) do
		os.loadAPI("/System/API/" .. api)
	end
end

function PrintCentered(text, y)
	local w, h = term.getSize()
	
	x = math.ceil(math.ceil((w / 2) - (#text / 2)), 0) + 1
	
	term.setCursorPos(x, y)
	
	write(text)
end

function LoadingScreen()
	if (fs.getFreeSpace and fs.getFreeSpace("/") < 51200 then
		term.setBackgroundColor(colours.grey)
		term.setTextColor(colours.white)
		term.clear()

		PrintCentered('You have less than 50KB of free space remaining!', 6)
		PrintCentered('You may encounter crashes due to this.' , 7)
		term.setTextColor(colours.lightGrey)

		PrintCentered('Try to free up some space, open \'About LagOS\'' , 9)
		PrintCentered('in the Lag menu for more information.' , 10)
		term.setTextColor(colours.white)

		PrintCentered('Click anywhere to continue.', 12)

		os.pullEvent('mouse_click')
	end
	
	term.setBackgroundColour(colours.black)	
	term.clear()
	sleep(0.1)
	term.setBackgroundColour(colours.grey)
	term.clear()
	sleep(0.1)
	term.setBackgroundColour(colours.lightGrey)
	term.clear()
	sleep(0.1)

	local screenWidth, screenHeight = term.getSize()
	term.setBackgroundColour(colours.white)	
	term.clear()
	local x = (screenWidth - 14) / 2
	local y = (screenHeight - 9) / 2

	local text = 'LagOS'
	term.setCursorPos((screenWidth - #text) / 2, y + 13)
	term.setTextColour(colours.blue)
	term.write(text)
	
	local currentImage = -1
	local totalAPIs = #fs.list(root .. 'System/API/')

	for _, file in pairs(fs.list(root .. 'System/API/')) do
		if string.sub(file,1,1) ~= "." then
			if math.floor(_*(8/totalAPIs)) ~= currentImage then
				currentImage = math.floor(_*(8/totalAPIs))

				local image = paintutils.loadImage('System/Images/Boot/boot' .. currentImage)

				paintutils.drawImage(image, x, y)
			end

			term.setBackgroundColor(colours.white)
			term.setCursorPos(1, y + 11)

			term.clearLine()
			if pocket then
				PrintCentered(file, y + 11)
			else
				PrintCentered('Loading API '..file, y + 11)
			end
			
			sleep(0)
			
			if not LoadAPI(root .. 'System/API/' .. file) then
				term.setTextColour(colours.red)
				PrintCentered('Error While Loading API '..file, y + 11)
				term.setCursorPos(1, 1)
				sleep(3)
			
			return false
			end
		end
	end
	
	sleep(0.1)
	
	return true
end

Main()
